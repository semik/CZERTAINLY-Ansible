---
- name: czertainly host config
  hosts: all
  connection: local

  pre_tasks:
    - name: "read database.yml"
      include_vars: /etc/ansible/vars/database.yml
      tags: always
    - name: "read docker.yml"
      include_vars: /etc/ansible/vars/docker.yml
      tags: always
    - name: "read proxy.yml"
      include_vars: /etc/ansible/vars/proxy.yml
      tags: always
    - name: "read ingress.yml"
      include_vars: /etc/ansible/vars/ingress.yml
      tags: always
    - name: "read trustedCA.yml"
      include_vars: /etc/ansible/vars/trustedCA.yml
      tags: always
    - name: "read czertainly.yml"
      include_vars: /etc/ansible/vars/czertainly.yml
      tags: always

  vars:
    # Here we are preparing dict with environment which is based on
    # configuration. In most cases values of that dict will be
    # undefined, to prevent Ansible from failing we set default value
    # to ''.
    proxy_env:
      http_proxy: "{{ proxy.http | default('') }}"
      HTTP_PROXY: "{{ proxy.http | default('') }}"
      HTTPS_PROXY: "{{ proxy.https | default('') }}"
      FTP_PROXY: "{{ proxy.ftp | default('') }}"
      FTPS_PROXY: "{{ proxy.ftps | default('') }}"
      NO_PROXY: "{{ proxy.dont_use_for | default('') | join(',') }}"

  # Now we filterout those dict keys which have environment valuables
  # which have value equal to ''. This and previous block is need to
  # be able to use HTTP_PROXY and fiends and without playbook/machine
  # restart. Inspiration for filter:
  # https://medium.com/opsops/how-to-filter-a-dictionary-in-ansible-b5dad74a6f66
  environment: '{{ proxy_env|dict2items|rejectattr("value", "equalto", "")|list|items2dict }}'

  roles:
    - role: http_proxy
    - role: postgres
    - role: helm
    - role: rke2
    - role: czertainly
